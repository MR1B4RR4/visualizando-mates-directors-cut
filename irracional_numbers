// Get the canvas element
var canvas = document.getElementById("myCanvas");

// Set the canvas size to full screen
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

// Get the drawing context
var ctx = canvas.getContext("2d");

// Flip the y-axis and move the origin to lower left corner
ctx.scale(1, -1);
ctx.translate(0, -canvas.height);

//Fill the canvas with dark gray:
ctx.fillStyle = "#222";
ctx.fillRect(0, 0, canvas.width, canvas.height);

class Visualizer {
    constructor(canvasId, options) {
        this.canvas = document.getElementById(canvasId);
        this.ctx = this.canvas.getContext('2d');
        this.options = options;
    }

    clearCanvas() {
        this.ctx.fillStyle = "black";
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
    }

    getCoord(val, radius) {
        const theta = 2 * Math.PI * 0.1 * val;
        return {
            x: radius * Math.sin(theta) + this.canvas.width / 2,
            y: -radius * Math.cos(theta) + this.canvas.height / 2,
        };
    }

    drawBackground() {
        this.clearCanvas();
        
        let radius = this.options.radius;
        if (this.options.showDots) radius += 20;
        if (this.options.showBars) radius += 5;

        const colors = this.options.colors;
        this.ctx.lineWidth = 2;
        this.ctx.font = "16px Arial";

        for (let i = 0; i < 10; i++) {
            const from = this.getCoord(i, radius);
            const to = this.getCoord(i + 1, radius);
            this.ctx.beginPath();
            this.ctx.strokeStyle = colors[i % colors.length];
            this.ctx.moveTo(from.x, from.y);
            this.ctx.lineTo(to.x, to.y);
            this.ctx.stroke();

            const midTheta = 2 * Math.PI * 0.1 * i + 0.1 * Math.PI / 2;
            const mid = this.getCoord(i + 0.5, radius + (this.options.showBars ? 35 : 15));
            this.ctx.save();
            this.ctx.translate(mid.x, mid.y);
            this.ctx.rotate(-midTheta + Math.PI / 2);
            this.ctx.fillText(i.toString(), 0, 0);
            this.ctx.restore();
        }

        // Center text
        this.ctx.fillStyle = "white";
        this.ctx.font = "60px Arial";
        this.ctx.textAlign = "center";
        this.ctx.fillText(this.options.centerText, this.canvas.width / 2, this.canvas.height / 2);
    }

    // You would add methods like drawBars, drawDots, etc., here
    // These methods would use similar canvas drawing commands to implement the required functionality

    // Example of a method you might include
    drawDot(x, y, size, color) {
        this.ctx.beginPath();
        this.ctx.arc(x, y, size, 0, 2 * Math.PI, false);
        this.ctx.fillStyle = color;
        this.ctx.fill();
    }
}

// Usage
const visualizer = new Visualizer('myCanvas', {
    radius: 200,
    showDots: true,
    showBars: true,
    colors: ["red", "green", "blue", "yellow", "cyan", "magenta", "white"], // Example color array
    centerText: "Ï€"
});

visualizer.drawBackground();
// Here you would call other methods as needed, e.g., visualizer.drawBars(), visualizer.drawDots(), etc.

